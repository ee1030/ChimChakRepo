1번. 

#include "stdafx.h"
#include <iostream>
using namespace std;

/* 2장 연습문제 1번 
int TestFunc(int nParam1 = 5, int nParam2, int nParam3 = 10)
int TestFunc(int nParam1 = 5, int nParam2)

두 함수 원형에서 잘못된 부분은 첫번째로 매개변수가 중간에 디폴트 값이 설정되지 않았고
두번째로 두번째 함수 원형에서 오른쪽 매개변수부터 디폴트 값을 기술 하지 않았기 때문이다.
*/
int main()
{
	return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

2번.

#include "stdafx.h"
#include <iostream>
using namespace std;

/*
void TestFunc(int a)
{
	std::cout << "TestFunc(int)" << std::endl;
}

void TestFunc(int a, int b = 10)
{
	std::cout << "TestFunc(int, int)" << std::endl;
}

두 함수 모두 호출하는데는 문제가 없지만 호출하는 코드에서 매개변수를 하나만 기술하였을때
모호성이 발생하게 된다. 두 함수 모두 하나의 매개변수만 받아도 동작할 수 있기 때문이다.
*/
int main()
{
	return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

3번.

#include "stdafx.h"
#include <iostream>
using namespace std;

/*
함수를 다중 정의 하는 경우 같은 일을 하는 코드가 다중 정의된 함수로 여러개 존재하여
메모리를 낭비하게 될 수도 있지만 함수 템플릿을 사용하면 같은 일을 하는 코드를 하나의
템플릿으로 엮어 여러 코드가 나오지 않을 수 있기때문에 안정적인 구조를 이룬다.
*/
int main()
{
	return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

4번.

#include "stdafx.h"
#include <iostream>
using namespace std;

/*
매크로와 인라인 함수의 공통된 장점으로는 함수를 이용한 호출과 반환으로 인한 메모리 할당
등의 오버헤드가 일어나지 않아 효율적이라는 것이다.
*/
int main()
{
	return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

5번.

using (선언)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

6번.

#include "stdafx.h"
#include <iostream>
using namespace std;

int nData = 200;

namespace TEST
{
	int nData = 100;
	void TestFunc(void) {
		cout << nData << endl;
	}
}
int main()
{
	TEST::TestFunc();    // 미리 네임스페이스를 기술하였기 때문에 전역변수에 존재하는값을 
			// 가져오지 않고 네임스페이스 내에 있는 nData의 값을 가져온다.
	return 0;
}

결과값 100
